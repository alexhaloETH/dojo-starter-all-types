// Generated by dojo-bindgen on Thu, 29 Aug 2024 01:27:58 +0000. Do not modify this file manually.
using System;
using System.Threading.Tasks;
using Dojo;
using Dojo.Starknet;
using UnityEngine;
using dojo_bindings;
using System.Collections.Generic;
using System.Linq;
using Enum = Dojo.Starknet.Enum;

// System definitions for `dojo_starter_all_types-test_all_inputs` contract
public class Test_all_inputs : MonoBehaviour {
    // The address of this contract
    public string contractAddress;

    
    // Call the `dojo_init` system with the specified Account and calldata
    // Returns the transaction hash. Use `WaitForTransaction` to wait for the transaction to be confirmed.
    public async Task<FieldElement> dojo_init(Account account) {
        List<dojo.FieldElement> calldata = new List<dojo.FieldElement>();
        

        return await account.ExecuteRaw(new dojo.Call[] {
            new dojo.Call{
                to = contractAddress,
                selector = "dojo_init",
                calldata = calldata.ToArray()
            }
        });
    }
            

    
    // Call the `test_u8` system with the specified Account and calldata
    // Returns the transaction hash. Use `WaitForTransaction` to wait for the transaction to be confirmed.
    public async Task<FieldElement> test_u8(Account account, byte value) {
        List<dojo.FieldElement> calldata = new List<dojo.FieldElement>();
        calldata.Add(new FieldElement(value).Inner);

        return await account.ExecuteRaw(new dojo.Call[] {
            new dojo.Call{
                to = contractAddress,
                selector = "test_u8",
                calldata = calldata.ToArray()
            }
        });
    }
            

    
    // Call the `test_u16` system with the specified Account and calldata
    // Returns the transaction hash. Use `WaitForTransaction` to wait for the transaction to be confirmed.
    public async Task<FieldElement> test_u16(Account account, ushort value) {
        List<dojo.FieldElement> calldata = new List<dojo.FieldElement>();
        calldata.Add(new FieldElement(value).Inner);

        return await account.ExecuteRaw(new dojo.Call[] {
            new dojo.Call{
                to = contractAddress,
                selector = "test_u16",
                calldata = calldata.ToArray()
            }
        });
    }
            

    
    // Call the `test_u32` system with the specified Account and calldata
    // Returns the transaction hash. Use `WaitForTransaction` to wait for the transaction to be confirmed.
    public async Task<FieldElement> test_u32(Account account, uint value) {
        List<dojo.FieldElement> calldata = new List<dojo.FieldElement>();
        calldata.Add(new FieldElement(value).Inner);

        return await account.ExecuteRaw(new dojo.Call[] {
            new dojo.Call{
                to = contractAddress,
                selector = "test_u32",
                calldata = calldata.ToArray()
            }
        });
    }
            

    
    // Call the `test_u64` system with the specified Account and calldata
    // Returns the transaction hash. Use `WaitForTransaction` to wait for the transaction to be confirmed.
    public async Task<FieldElement> test_u64(Account account, ulong value) {
        List<dojo.FieldElement> calldata = new List<dojo.FieldElement>();
        calldata.Add(new FieldElement(value).Inner);

        return await account.ExecuteRaw(new dojo.Call[] {
            new dojo.Call{
                to = contractAddress,
                selector = "test_u64",
                calldata = calldata.ToArray()
            }
        });
    }
            

    
    // Call the `test_u128` system with the specified Account and calldata
    // Returns the transaction hash. Use `WaitForTransaction` to wait for the transaction to be confirmed.
    public async Task<FieldElement> test_u128(Account account, BigInteger value) {
        List<dojo.FieldElement> calldata = new List<dojo.FieldElement>();
        calldata.Add(new FieldElement(value).Inner);

        return await account.ExecuteRaw(new dojo.Call[] {
            new dojo.Call{
                to = contractAddress,
                selector = "test_u128",
                calldata = calldata.ToArray()
            }
        });
    }
            

    
    // Call the `test_felt252` system with the specified Account and calldata
    // Returns the transaction hash. Use `WaitForTransaction` to wait for the transaction to be confirmed.
    public async Task<FieldElement> test_felt252(Account account, FieldElement value) {
        List<dojo.FieldElement> calldata = new List<dojo.FieldElement>();
        calldata.Add(value.Inner);

        return await account.ExecuteRaw(new dojo.Call[] {
            new dojo.Call{
                to = contractAddress,
                selector = "test_felt252",
                calldata = calldata.ToArray()
            }
        });
    }
            

    
    // Call the `test_u256` system with the specified Account and calldata
    // Returns the transaction hash. Use `WaitForTransaction` to wait for the transaction to be confirmed.
    public async Task<FieldElement> test_u256(Account account, U256 value) {
        List<dojo.FieldElement> calldata = new List<dojo.FieldElement>();
        calldata.Add(new FieldElement(value.low).Inner);
		calldata.Add(new FieldElement(value.high).Inner);

        return await account.ExecuteRaw(new dojo.Call[] {
            new dojo.Call{
                to = contractAddress,
                selector = "test_u256",
                calldata = calldata.ToArray()
            }
        });
    }
            

    
    // Call the `test_array` system with the specified Account and calldata
    // Returns the transaction hash. Use `WaitForTransaction` to wait for the transaction to be confirmed.
    public async Task<FieldElement> test_array(Account account, byte[] array) {
        List<dojo.FieldElement> calldata = new List<dojo.FieldElement>();
        calldata.Add(new FieldElement(array.Length).Inner);
		calldata.AddRange(array.SelectMany(arrayItem => new [] { new FieldElement(arrayItem).Inner }));

        return await account.ExecuteRaw(new dojo.Call[] {
            new dojo.Call{
                to = contractAddress,
                selector = "test_array",
                calldata = calldata.ToArray()
            }
        });
    }
            

    
    // Call the `test_tuple` system with the specified Account and calldata
    // Returns the transaction hash. Use `WaitForTransaction` to wait for the transaction to be confirmed.
    public async Task<FieldElement> test_tuple(Account account, (byte, ushort) tuple) {
        List<dojo.FieldElement> calldata = new List<dojo.FieldElement>();
        calldata.Add(new FieldElement(tuple.Item1).Inner);
		calldata.Add(new FieldElement(tuple.Item2).Inner);

        return await account.ExecuteRaw(new dojo.Call[] {
            new dojo.Call{
                to = contractAddress,
                selector = "test_tuple",
                calldata = calldata.ToArray()
            }
        });
    }
            

    
    // Call the `test_string` system with the specified Account and calldata
    // Returns the transaction hash. Use `WaitForTransaction` to wait for the transaction to be confirmed.
    public async Task<FieldElement> test_string(Account account, string value) {
        List<dojo.FieldElement> calldata = new List<dojo.FieldElement>();
        calldata.AddRange(ByteArray.Serialize(value).Select(f => f.Inner));

        return await account.ExecuteRaw(new dojo.Call[] {
            new dojo.Call{
                to = contractAddress,
                selector = "test_string",
                calldata = calldata.ToArray()
            }
        });
    }
            

    
    // Call the `test_signed_i8` system with the specified Account and calldata
    // Returns the transaction hash. Use `WaitForTransaction` to wait for the transaction to be confirmed.
    public async Task<FieldElement> test_signed_i8(Account account, sbyte value) {
        List<dojo.FieldElement> calldata = new List<dojo.FieldElement>();
        calldata.Add(new FieldElement(value).Inner);

        return await account.ExecuteRaw(new dojo.Call[] {
            new dojo.Call{
                to = contractAddress,
                selector = "test_signed_i8",
                calldata = calldata.ToArray()
            }
        });
    }
            

    
    // Call the `test_signed_i16` system with the specified Account and calldata
    // Returns the transaction hash. Use `WaitForTransaction` to wait for the transaction to be confirmed.
    public async Task<FieldElement> test_signed_i16(Account account, short value) {
        List<dojo.FieldElement> calldata = new List<dojo.FieldElement>();
        calldata.Add(new FieldElement(value).Inner);

        return await account.ExecuteRaw(new dojo.Call[] {
            new dojo.Call{
                to = contractAddress,
                selector = "test_signed_i16",
                calldata = calldata.ToArray()
            }
        });
    }
            

    
    // Call the `test_signed_i128` system with the specified Account and calldata
    // Returns the transaction hash. Use `WaitForTransaction` to wait for the transaction to be confirmed.
    public async Task<FieldElement> test_signed_i128(Account account, BigInteger value) {
        List<dojo.FieldElement> calldata = new List<dojo.FieldElement>();
        calldata.Add(new FieldElement(value).Inner);

        return await account.ExecuteRaw(new dojo.Call[] {
            new dojo.Call{
                to = contractAddress,
                selector = "test_signed_i128",
                calldata = calldata.ToArray()
            }
        });
    }
            

    
    // Call the `test_mix_1` system with the specified Account and calldata
    // Returns the transaction hash. Use `WaitForTransaction` to wait for the transaction to be confirmed.
    public async Task<FieldElement> test_mix_1(Account account, byte value1, BigInteger value2) {
        List<dojo.FieldElement> calldata = new List<dojo.FieldElement>();
        calldata.Add(new FieldElement(value1).Inner);
		calldata.Add(new FieldElement(value2).Inner);

        return await account.ExecuteRaw(new dojo.Call[] {
            new dojo.Call{
                to = contractAddress,
                selector = "test_mix_1",
                calldata = calldata.ToArray()
            }
        });
    }
            

    
    // Call the `test_mix_2` system with the specified Account and calldata
    // Returns the transaction hash. Use `WaitForTransaction` to wait for the transaction to be confirmed.
    public async Task<FieldElement> test_mix_2(Account account, FieldElement value1, string value2) {
        List<dojo.FieldElement> calldata = new List<dojo.FieldElement>();
        calldata.Add(value1.Inner);
		calldata.AddRange(ByteArray.Serialize(value2).Select(f => f.Inner));

        return await account.ExecuteRaw(new dojo.Call[] {
            new dojo.Call{
                to = contractAddress,
                selector = "test_mix_2",
                calldata = calldata.ToArray()
            }
        });
    }
            

    
    // Call the `test_mix_3` system with the specified Account and calldata
    // Returns the transaction hash. Use `WaitForTransaction` to wait for the transaction to be confirmed.
    public async Task<FieldElement> test_mix_3(Account account, ushort value1, byte[] value2, U256 value3) {
        List<dojo.FieldElement> calldata = new List<dojo.FieldElement>();
        calldata.Add(new FieldElement(value1).Inner);
		calldata.Add(new FieldElement(value2.Length).Inner);
		calldata.AddRange(value2.SelectMany(value2Item => new [] { new FieldElement(value2Item).Inner }));
		calldata.Add(new FieldElement(value3.low).Inner);
		calldata.Add(new FieldElement(value3.high).Inner);

        return await account.ExecuteRaw(new dojo.Call[] {
            new dojo.Call{
                to = contractAddress,
                selector = "test_mix_3",
                calldata = calldata.ToArray()
            }
        });
    }
            

    
    // Call the `test_mix_4` system with the specified Account and calldata
    // Returns the transaction hash. Use `WaitForTransaction` to wait for the transaction to be confirmed.
    public async Task<FieldElement> test_mix_4(Account account, ulong value1, (byte, ushort) value2, FieldElement value3, string value4) {
        List<dojo.FieldElement> calldata = new List<dojo.FieldElement>();
        calldata.Add(new FieldElement(value1).Inner);
		calldata.Add(new FieldElement(value2.Item1).Inner);
		calldata.Add(new FieldElement(value2.Item2).Inner);
		calldata.Add(value3.Inner);
		calldata.AddRange(ByteArray.Serialize(value4).Select(f => f.Inner));

        return await account.ExecuteRaw(new dojo.Call[] {
            new dojo.Call{
                to = contractAddress,
                selector = "test_mix_4",
                calldata = calldata.ToArray()
            }
        });
    }
            

    
    // Call the `test_mix_5` system with the specified Account and calldata
    // Returns the transaction hash. Use `WaitForTransaction` to wait for the transaction to be confirmed.
    public async Task<FieldElement> test_mix_5(Account account, BigInteger value1, ushort value2, FieldElement value3, long value4) {
        List<dojo.FieldElement> calldata = new List<dojo.FieldElement>();
        calldata.Add(new FieldElement(value1).Inner);
		calldata.Add(new FieldElement(value2).Inner);
		calldata.Add(value3.Inner);
		calldata.Add(new FieldElement(value4).Inner);

        return await account.ExecuteRaw(new dojo.Call[] {
            new dojo.Call{
                to = contractAddress,
                selector = "test_mix_5",
                calldata = calldata.ToArray()
            }
        });
    }
            
}
        